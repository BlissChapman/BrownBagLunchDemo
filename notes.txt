*write CocoaNuts stuff on board - email, url, etc.* Intro-----Thanks for coming everyone and welcome to “Introduction to iOS Development with Swift”. My name is Justin Loew and I’m with CocoaNuts, an iOS development group here on campus. If you’re interested in learning more iOS stuff shoot us an email, I promise I don’t bite. Today I’m going to give you a quick taste of what it’s like to develop for iOS.The main focus of the talk will be on a demo app we are going to create on the screen for you and as such it is absolutely crucial that everyone asks LOTS of questions. In all seriousness though, if you have a question chances are somebody else does too. There are no stupid questions and they help all of us learn.Some parts of this demo will be a bit more technical than others, but my hope is that everyone will able to follow about 75% of what is going on, and even if you have no idea what is happening, you should be able to familiarize yourself with the environment, to get a sense of what it FEELS like to go through the process of building an app, and that more than anything else is what I want you to get out of this talk.Demo---- 1. In its most basic form, we want to build an app that changes the background color of the screen depending on the values of three sliders: one for red, one for green, and one for blue. [Draw a mini mockup on the whiteboard.]2. Open Xcode. Xcode is what technical people call an Integrated Development Environment and all that means is it's the place where you build software, in this case apps for iPhones, iPads, Macs, and now watches.3. Create a new project called “NauticalColors”.4. Before we even look at anything else, let's build and run our project.5. Hooray, you are now all app developers! Congratulations everyone!6. [Talk about project navigator and then move app delegate and launch screen and images out of the way.]7. Talk about the storyboard - it's where you build the UI (user interface, just what the users see. Xcode has very powerful technologies for building user interfaces and we'll get to see a little bit of that today.8. First thing you notice is the awkward shape of this box, of this view. This is called a view controller and all it is is one screenful of content. But, it doesn't look like any iPad, iPhone, or Apple Watch IVE ever seen. Does anyone want to venture a guess as to why this view controller is this bizarre square shape?9. App developers today have to build interfaces that work properly and in some cases, are even individually optimized for different screen sizes and different orientations. The technology Apple uses to accomplish this is called Auto Layout and it's extremely powerful and today were just gonna barely scratch the surface of it.10. Create the basic storyboard including the label and three sliders (0.9 centered) -> "Adjust the slider's to change the red, green, and blue values of the background color." Fun fact: these guidelines are orange and blue because one of the key players in making the Auto Layout engine behind it went to the U of I.11. Build and run to show the sliders working and the label jenky (switch to 0 lines). Any questions? The problem is, these sliders don’t DO anything.12. Now we actually have to write some code.13. Open up the view controller using option-click and explain how the code to power this view is in the ViewController class.14. If we think about our mockup for a second, there are actually two different things are code needs to know. It needs to know what the value of each of these sliders is and it needs to know when that value changes.15. Connect the outlets explaining how they let us access different properties of our interface.16. Connect the sliders to the same @IBAction:17. Mention autocomplete and integrated documentation.18. Write a print statement to print out the value of each of the sliders every time it changes.19. Don't cast the first time and show them the error message - this is the 25% it's ok to not understand.20. @IBAction func sliderValueChanged(_ sender: UISlider) {        view.backgroundColor = UIColor(red: CGFloat(redSlider.value)/255, green: CGFloat(greenSlider.value)/255, blue: CGFloat(blueSlider.value)/255, alpha: 1.0)21. For those interested in mundane pieces of trivia, IB stands for interface builder which was a separate program used to edit interface files like XIBs and NIBs before Xcode 4.22. Build and run and test it out. Works great! The problem is, it doesn’t start with any default color and that’s super boring.23. Edit the values in storyboard to be: 212, 61, 4424. Build and run. Uh oh! It still has no default color!! This is because nothing is telling the background color to update according to the slider’s values.25. Add this code to ViewDidLoad: view.backgroundColor = UIColor(red: CGFloat(redSlider.value)/255, green: CGFloat(greenSlider.value)/255, blue: CGFloat(blueSlider.value)/255, alpha: 1.0)26. Test it out and ask if we have any more questions.If There Is Time----------------1. Add three labels to show the values of the sliders and add this to the @IBAction and ViewDidLoad:2. redSliderLabel.text = “Red: \(redSlider.value)"        greenSliderLabel.text = “Green: \(greenSlider.value)"        blueSliderLabel.text = “Blue: \(blueSlider.value)"3. Move sliders over to the left. align center to x 1.2 or 0.8———— any questions?  IF THERE IS STILL TIME 1. Add the rooster and label. Rooster image aspect ratio is 95:1372. if redSlider.value == 255.0 && greenSlider.value == 0.0 && blueSlider.value == 0.0 {            toggleRooster(true)        } else {            toggleRooster(false)        }3. func toggleRooster(visible: Bool) {        rooster.hidden = !visible        roosterLabel.hidden = !visible    }POSSIBLE BUGS: •Will have to change the compression resistance of the sliders to 751.•Update the label to 0 lines.EXTRA •Common iOS Design paradigms include delegation to allow customization without needing to know all the gritty details of subclassing, model-view-controller,•Mention autocomplete And built in documentation